@Get(':item_id')
    async findAll(
        @Param('item_id') item_id: number,
        @Res() res: Response,
        @Query('page', new DefaultValuePipe(1), ParseIntPipe) page = 1,
        @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit = 10,
    ): Promise<Pagination<QuestionsEntity, IPaginationMeta> | void> {
        limit = limit > 100 ? 100 : limit;
        const paginatedQuestions = await this.QuestionsService.paginate({
            page,
            limit,
            route: 'item/item_id'
        });
        if (paginatedQuestions)
            return res.status(200).send(paginatedQuestions).end()
        return res.status(404).end('Error! Questions Not Found')
    }